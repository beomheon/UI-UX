import 'package:example/sub/PageOne.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() {
  runApp(MyApp());
}

// 앱의 시작점인 MyApp 위젯
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: HttpApp(),
    );
  }
}

// HTTP 요청과 검색 기록 관리를 위한 위젯
class HttpApp extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _HttpAppState();
}

class _HttpAppState extends State<HttpApp> {
  List<dynamic> data = []; // 정보를 저장하는 리스트
  List<String> searchHistory = []; // 검색 기록을 저장하는 리스트
  TextEditingController _editingController =
      TextEditingController(); // 검색어 입력을 위한 컨트롤러
  FocusNode _focusNode = FocusNode(); // 텍스트 필드의 포커스를 관리하기 위한 FocusNode

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('음식점 검색'),
        actions: [
          IconButton(
            icon: Icon(Icons.search),
            onPressed: () {
              _focusNode.unfocus(); // 검색 버튼을 누를 때 키보드 사라지도록 포커스 해제
              setState(() {
                data.clear();
                addToSearchHistory(_editingController.text);
                getJSONData();
              });
            },
          ),
        ],
      ),
      body: Column(
        children: [
          Padding(
            padding: EdgeInsets.all(16.0),
            child: TextField(
              controller: _editingController,
              focusNode: _focusNode,
              // 텍스트 필드와 FocusNode 연결
              style: TextStyle(color: Colors.black),
              keyboardType: TextInputType.text,
              decoration: InputDecoration(
                hintText: '검색어를 입력하세요.',
              ),
              onSubmitted: (value) {
                _focusNode.unfocus(); // 검색어 제출 시 키보드 사라지도록 포커스 해제
                setState(() {
                  data.clear();
                  addToSearchHistory(_editingController.text);
                  getJSONData();
                });
              },
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemBuilder: (context, index) {
                return Card(
                  color: Colors.white,
                  child: ListTile(
                    leading: Image.network(
                      data[index]['thumbnail'],
                      height: 100,
                      width: 100,
                      fit: BoxFit.contain,
                    ),
                    title: Text(data[index]['title'].toString()),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('저자: ${data[index]['author'].toString()}'),
                        Text('가격: ${data[index]['sale_price'].toString()}'),
                        Text('상태: ${data[index]['status'].toString()}'),
                      ],
                    ),
                    onTap: () {
                      showBookInfoModal(index);
                    },
                  ),
                );
              },
              itemCount: data.length,
            ),
          ),
          if (_focusNode.hasFocus) // 텍스트 필드에 포커스가 있는 경우에만 검색 기록 표시
            Container(
              height: 200,
              child: ListView.builder(
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(searchHistory[index]),
                    onTap: () {
                      _focusNode.unfocus(); // 검색 기록 선택 시 키보드 사라지도록 포커스 해제
                      _editingController.text = searchHistory[index];
                      setState(() {
                        data.clear();
                        getJSONData();
                      });
                    },
                  );
                },
                itemCount: searchHistory.length,
              ),
            ),
        ],
      ),
    );
  }

  // 검색 기록을 추가하는 메서드입
  void addToSearchHistory(String query) {
    if (!searchHistory.contains(query)) {
      searchHistory.insert(0, query);
    }
  }

  // 도서 정보를 가져오는 HTTP 요청을 보내는 메서드
  Future<String> getJSONData() async {
    var url = 'https://dapi.kakao.com/v3/search/book?'
        'target=title&query=${_editingController.text}';
    var response = await http.get(Uri.parse(url),
        headers: {"Authorization": "KakaoAK cb44afcef6081f91baf8bc5dc66c4044"});
    setState(() {
      var dataConvertedToJSON = json.decode(response.body);
      List<dynamic> result = dataConvertedToJSON['documents'];
      data.addAll(result);
    });
    return "Success";
  }

  @override
  void dispose() {
    _editingController.dispose();
    super.dispose();
  }

  void showBookInfoModal(int index) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            '도서 정보',
            style: TextStyle(
              fontSize: 20.0,
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                '제목: ${data[index]['title'].toString()}',
                style: TextStyle(fontSize: 18.0),
              ),
              Text(
                '저자: ${data[index]['author'].toString()}',
                style: TextStyle(fontSize: 16.0),
              ),
              Text(
                '가격: ${data[index]['sale_price'].toString()}',
                style: TextStyle(fontSize: 16.0),
              ),
              Text(
                '상태: ${data[index]['status'].toString()}',
                style: TextStyle(fontSize: 16.0),
              ),
              Text(
                '출판사: ${data[index]['publisher'].toString()}',
                style: TextStyle(fontSize: 16.0),
              ),
            ],
          ),
          actions: [
            Row(
              children: [
                TextButton(
                  child: Icon(
                    Icons.local_parking,
                    color: Colors.green,
                    size: 30.0,
                  ),
                  onPressed: () {
                    showCafeInfo();
                  },
                ),
                Spacer(),
                TextButton(
                  child: Text(
                    '닫기',
                    style: TextStyle(
                      fontSize: 18.0,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                ),
              ],
            ),
          ],
        );
      },
    );
  }

  void showCafeInfo() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => PageOne(editingController: _editingController)),
    );
  }
}
